#!/bin/zsh

[ "$STEVEDORE" ] && {
    echo "It looks like you are already in environment $STEVEDORE. Aborting."
    exit 1
}
[ "$(which docker)" ] || {
    echo "Could not find Docker binary. Aborting."
    exit 1
}
DOCKER=$(which docker)
# save the current working dir
CURRDIR=${PWD}
CURRUID=$(id -u)
SDROOT=~/.stevedore
mkdir -p "$SDROOT"
cd "$SDROOT"

HELP="stevedore - containerize your development environments."
_defcmd () {
    HELP="$(printf "%s\n%-10s %s\n\n" "$HELP" "$1" "$2")"
}

DOCKERFILE="FROM centos"

##############################################################################
# Commands
##############################################################################


_defcmd destroy "Destroy an environment. This cannot be undone."
_stevedore_cmd_destroy () {
    _stevedore_env_destroy $1
}

_defcmd edit "Launch your editor ($VISUAL) to edit and rebuild an environment."
_stevedore_cmd_edit () {
    _stevedore_env_check $1
    $VISUAL $1/Dockerfile.post
    _stevedore_env_build $1
}

_defcmd enter "Enter a given environment."
_stevedore_cmd_enter () {
    _stevedore_env_enter $1
}

_defcmd help "Show this help message."
_stevedore_cmd_help () {
    echo "$HELP"
}

_defcmd id "Show the container id of an running environment."
_stevedore_cmd_id () {
    _stevedore_env_check $1
    cat $1/cid
}

_defcmd init "Rebuild the stevedore base image (normally done automatically)."
_stevedore_cmd_init () {
    if $DOCKER images -q stevedore | grep -q . ; then
        $DOCKER rmi stevedore
    fi
    BUILDDIR=$(mktemp -d)
    mkdir $BUILDDIR
    cat >> $BUILDDIR/Dockerfile <<EOF
$DOCKERFILE
RUN yum -y remove iputils \
    && yum -y upgrade \
    && yum -y install zsh git sudo which man curl make gcc tree tar glibc-common bzip2
EOF
    $DOCKER build -rm -t stevedore $BUILDDIR | tee $BUILDDIR/log 
    if grep -q Successfully $BUILDDIR/log
    then
	    echo "Successfully created stevedore base image."
	    rm -rf $BUILDDIR
    else
	    echo "Build failed. Check $BUILDDIR/log for details."
	    exit 1
    fi
}

_defcmd list "List existing environments."
_stevedore_cmd_list () {
    ls -1
}

_defcmd log "Show build log for an environment."
_stevedore_cmd_log () {
    # Do not check environment validity; in case the initial build failed.
    cat $1/build.log
}

_defcmd new "Create a new environment."
_stevedore_cmd_new () {
    _stevedore_env_new $@
    _stevedore_env_build $1
}

_defcmd rebuild "Restore an environment to the state defined by its Dockerfile."
_stevedore_cmd_rebuild () {
    _stevedore_env_check $1
    _stevedore_env_build $1
}

_defcmd url "Generate an URL pointing to an environment. Port is optional."
_stevedore_cmd_url () {
    _stevedore_env_check $1
    ADDR=$($DOCKER inspect $(cat $1/cid) | grep IPAddress | cut -d\" -f4)
    [ "$ADDR" ] || {
	echo "You have to enter the environment, otherwise, it has no address."
	exit 1
    }
    if [ "$2" ]
    then 
	PORT=$($DOCKER port $(cat $1/cid) $2 2>/dev/null)
	if [ "$PORT" ]
	then
	    echo "http://localhost:$PORT/"
	else
	    echo "http://$ADDR:$2/"
	fi
    else
	echo "http://$ADDR/"
    fi
}

##############################################################################
# Internal functions manipulating environments
##############################################################################

_stevedore_env_build () {
    $DOCKER images -q stevedore | grep -q . || {
	echo "The stevedore base image was not found; building it now."
	_stevedore_cmd_init
    }
    cat $1/Dockerfile.pre $1/Dockerfile.post > $1/Dockerfile
    #$DOCKER build -q -rm -t $1 $1 | tee $1/build.log 
    $DOCKER build  -rm -t $1 $1 | tee $1/build.log 
    if grep -q Successfully $1/build.log
    then
	echo "Build successful."
    else
	echo "Build failed. See full logs with 'stevedore log $1'."
	exit 1
    fi
    $DOCKER images -q $1 >> $1/history
}

_stevedore_env_check () {
    [ "$1" ] || {
	echo "Must specify environment name."
	exit 1
    }
    [ -d $1 ] || {
	echo "Environment does not exist."
	exit 1
    }
    [ -f $1/Dockerfile ] || {
	echo "Invalid or corrupt environment: Dockerfile is missing."
	exit 1
    }
    $DOCKER images -q $1 | grep -q . || {
	echo "Invalid or corrupt environment: Docker image is missing."
	exit 1
    }
}

_stevedore_env_destroy () {
    _stevedore_env_check $1
    echo "Deleting tagged images..."
    $DOCKER rmi $1
    rm -rf $1
    echo "Done."
}

_stevedore_env_enter () {
    _stevedore_env_check $1
    _stevedore_env_start $1
    CID=$(cat $1/cid)
    $DOCKER inspect $CID | grep -q Running...true || {
	$DOCKER start $CID >/dev/null
	sleep 0.2
    }
    echo "Press ENTER to enter environment $1."
    $DOCKER attach $CID
    echo "Exited environment $1."
    _stevedore_env_stop $1
}

_stevedore_env_genrun () {
    _stevedore_env_check $1
    grep ^[^-] $1/sudohist | {
	while read line
	do echo RUN $line
	done
    }
}

_stevedore_env_new () {
    [ "$1" ] || {
	echo "Must specify environment name."
	exit 1
    }
    [ -d "$1" ] && {
	echo "Environment $1 already exists."
	exit 1
    }
    $DOCKER images -q $1 | grep -q . && {
	echo "Sorry, a Docker image named $1 already exists."
	echo "Please pick another one."
	exit 1
    }
    mkdir "$1"

    curl https://raw.githubusercontent.com/cybersiddhu/stevedore/master/modules/shell/runner >> $1/Dockerfile.post

    if [ $# -ge 2 ]; then
        for module in ${@[2,-1]};
        do
            curl https://raw.githubusercontent.com/cybersiddhu/stevedore/master/modules/${module}/runner  >> $1/Dockerfile.post
        done
    fi

    cat >>$1/Dockerfile.post <<EOF

##############################################################################
## -- Make sure it has current user permission
RUN chown -R $CURRUID:$CURRUID /custom && localedef -c -i en_US -f UTF-8 en_US.UTF-8 
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8 
WORKDIR $HOME
ENV HOME $HOME
ENV STEVEDORE $1
ENV TERM screen
USER $USER
ENTRYPOINT ["/bin/zsh", "-i", "-l"]

##############################################################################
EOF
    cat >$1/Dockerfile.pre <<EOF
FROM stevedore
RUN useradd -m -s /bin/zsh -u $CURRUID $USER \ 
    && echo "$USER ALL=(ALL) NOPASSWD: ALL" >/etc/sudoers.d/$USER \
    && chmod 0440 /etc/sudoers.d/$USER && cp -a $(which sudo) $(which sudo).real 

EOF
}

_stevedore_env_start () {
    # Note: don't check env validity, because before first start, environment
    # is not valid yet.
    $DOCKER run -h stevedore-$1 -d -t -i -v $CURRDIR:$HOME $1 > $1/cid 2>/dev/null
    echo "started the container " $(cat $1/cid)
}

_stevedore_env_stop () {
    _stevedore_env_check $1
    $DOCKER kill $(cat $1/cid) >/dev/null
    $DOCKER wait $(cat $1/cid) >/dev/null
    echo "Stopped the container..."  $(cat $1/cid)
    $DOCKER rm $(cat $1/cid)
    echo -n "Deleted container: "
}

##############################################################################
# "Main"
##############################################################################

if [ "$1" ]
then
    CMD=$1
    shift
else
    CMD=help
fi

FUN=_stevedore_cmd_$CMD
type $FUN >/dev/null || {
    echo "Invalid command: $CMD."
    exit 1
}

$FUN "$@"
