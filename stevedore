#!/bin/sh

[ "$STEVEDORE" ] && {
    echo "It looks like you are already in environment $STEVEDORE. Aborting."
    exit 1
}
[ "$(which docker)" ] || {
    echo "Could not find Docker binary. Aborting."
    exit 1
}
DOCKER="sudo docker"
# save the current working dir
CURRDIR=${PWD}
SDROOT=~/.stevedore
mkdir -p "$SDROOT"
cd "$SDROOT"

HELP="stevedore - containerize your development environments."
_defcmd () {
    HELP="$(printf "%s\n%-10s %s\n\n" "$HELP" "$1" "$2")"
}

DOCKERFILE="FROM centos
RUN yum -y --exclude=upstart\* update
RUN yum -y install zsh vim git
"

##############################################################################
# Commands
##############################################################################

_defcmd autoadd "Add commands executed with 'sudo' to Dockerfile, and rebuild."
_stevedore_cmd_autoadd () {
    _stevedore_env_check $1
    _stevedore_env_genrun $1 >> $1/Dockerfile.pre
    _stevedore_env_build $1
}

# Do not expose checkpoint and rollback because commit is broken.
# (It does not propagate EXPOSE, ENTRYPOINT, etc.)
#_defcmd checkpoint "Record the current state of an environment."
_stevedore_cmd_checkpoint () {
    _stevedore_env_check $1
    N=$(wc -l $1/history)
    $DOCKER commit -m "Stevedore Checkpoint #$N" $(cat $1/cid) $1 >> $1/history
    echo "Stored checkpoint #$N for $1."
}

_defcmd destroy "Destroy an environment. This cannot be undone."
_stevedore_cmd_destroy () {
    _stevedore_env_stop $1
    _stevedore_env_destroy $1
}

_defcmd edit "Launch your editor ($VISUAL) to edit and rebuild an environment."
_stevedore_cmd_edit () {
    _stevedore_env_check $1
    $VISUAL $1/Dockerfile.pre
    _stevedore_env_build $1
}

_defcmd enter "Enter a given environment."
_stevedore_cmd_enter () {
    _stevedore_env_enter $1
}

_defcmd help "Show this help message."
_stevedore_cmd_help () {
    echo "$HELP"
}

_defcmd id "Show the container id of an environment."
_stevedore_cmd_id () {
    _stevedore_env_check $1
    cat $1/cid
}

_defcmd init "Rebuild the stevedore base image (normally done automatically)."
_stevedore_cmd_init () {
    BUILDDIR=/tmp/stevedore.$$
    mkdir $BUILDDIR
    echo "$DOCKERFILE" > $BUILDDIR/Dockerfile
    $DOCKER build -t stevedore $BUILDDIR | tee $BUILDDIR/log | grep ^Step
    if tail -n 1 $BUILDDIR/log | grep -q Successfully
    then
	echo "Successfully created stevedore base image."
	rm -rf $BUILDDIR
    else
	echo "Build failed. Check $BUILDDIR/log for details."
	exit 1
    fi
}

_defcmd list "List existing environments."
_stevedore_cmd_list () {
    ls -1
}

_defcmd log "Show build log for an environment."
_stevedore_cmd_log () {
    # Do not check environment validity; in case the initial build failed.
    cat $1/build.log
}

_defcmd new "Create a new environment."
_stevedore_cmd_new () {
    _stevedore_env_new $1
    _stevedore_env_build $1
}

_defcmd rebuild "Restore an environment to the state defined by its Dockerfile."
_stevedore_cmd_rebuild () {
    _stevedore_env_check $1
    _stevedore_env_build $1
}

# Do not expose checkpoint and rollback because commit is broken.
# (It does not propagate EXPOSE, ENTRYPOINT, etc.)
#_defcmd rollback "Restore an environment to the last checkpointed state."
_stevedore_cmd_rollback () {
    _stevedore_env_check $1
    _stevedore_env_stop $1
    _stevedore_env_start $1
}

_defcmd sudohist "Show history of commands that have been started with sudo."
_stevedore_cmd_sudohist () {
    _stevedore_env_check $1
    if [ -f $1/sudohist ]
    then
	echo "# sudo history:"
	cat $1/sudohist
	grep -q ^[^-] $1/sudohist && {
	    echo "# I suggest that you add the following to your Dockerfile:"
	    _stevedore_env_genrun $1
	    echo "# To add those lines to your Dockerfile and rebuild the"
	    echo "# environment, run 'stevedore autoadd $1'."
	}
    else
	echo "# No command found in history."
    fi
}

_defcmd url "Generate an URL pointing to an environment. Port is optional."
_stevedore_cmd_url () {
    _stevedore_env_check $1
    ADDR=$($DOCKER inspect $(cat $1/cid) | grep IPAddress | cut -d\" -f4)
    [ "$ADDR" ] || {
	echo "You have to enter the environment, otherwise, it has no address."
	exit 1
    }
    if [ "$2" ]
    then 
	PORT=$($DOCKER port $(cat $1/cid) $2 2>/dev/null)
	if [ "$PORT" ]
	then
	    echo "http://localhost:$PORT/"
	else
	    echo "http://$ADDR:$2/"
	fi
    else
	echo "http://$ADDR/"
    fi
}

##############################################################################
# Internal functions manipulating environments
##############################################################################

_stevedore_env_build () {
    $DOCKER images -q stevedore | grep -q . || {
	echo "The stevedore base image was not found; building it now."
	_stevedore_cmd_init
    }
    cat $1/Dockerfile.pre $1/Dockerfile.post > $1/Dockerfile
    $DOCKER build -t $1 $1 | tee $1/build.log | grep ^Step
    if tail -n 1 $1/build.log | grep -q Successfully
    then
	echo "Build successful."
    else
	echo "Build failed. See full logs with 'stevedore log $1'."
	exit 1
    fi
    $DOCKER images -q $1 >> $1/history
    rm -f $1/sudohist
    [ -f $1/cid ] && {
	echo "Restarting existing container..."
	_stevedore_env_stop $1
    }
    _stevedore_env_start $1
}

_stevedore_env_check () {
    [ "$1" ] || {
	echo "Must specify environment name."
	exit 1
    }
    [ -d $1 ] || {
	echo "Environment does not exist."
	exit 1
    }
    [ -f $1/cid ] || {
	echo "Invalid or corrupt environment: cid file is missing."
	exit 1
    }
    [ -f $1/Dockerfile ] || {
	echo "Invalid or corrupt environment: Dockerfile is missing."
	exit 1
    }
    $DOCKER images -q $1 | grep -q . || {
	echo "Invalid or corrupt environment: Docker image is missing."
	exit 1
    }
}

_stevedore_env_destroy () {
    _stevedore_env_check $1
    echo -n "Deleting container: "
    $DOCKER rm $(cat $1/cid)
    echo "Deleting tagged images..."
    $DOCKER rmi $1
    rm -rf $1
    echo "Done."
}

_stevedore_env_enter () {
    _stevedore_env_check $1
    CID=$(cat $1/cid)
    $DOCKER inspect $CID | grep -q Running...true || {
	$DOCKER start $CID >/dev/null
	sleep 0.2
    }
    echo "Press ENTER to enter environment $1."
    $DOCKER attach $CID
    echo "Exited environment $1."
    [ -f $1/sudohist ] && {
	echo "You ran some commands with sudo."
	echo "I recommend that you review them with 'stevedore sudohist $1'".
    }
}

_stevedore_env_genrun () {
    _stevedore_env_check $1
    grep ^[^-] $1/sudohist | {
	while read line
	do echo RUN $line
	done
    }
}

_stevedore_env_new () {
    [ "$1" ] || {
	echo "Must specify environment name."
	exit 1
    }
    [ -d "$1" ] && {
	echo "Environment $1 already exists."
	exit 1
    }
    $DOCKER images -q $1 | grep -q . && {
	echo "Sorry, a Docker image named $1 already exists."
	echo "Please pick another one."
	exit 1
    }
    mkdir "$1"
    cat >$1/sudo <<EOF
#!/bin/sh
[ "\$STEVEDORE" ] || {
    echo '\$STEVEDORE environment variable not found. Aborting.'
    exit 1
}
echo "\$@" >> \$HOME/.stevedore/\$STEVEDORE/sudohist
exec sudo.real "\$@"
EOF
    chmod +x $1/sudo
    cat >$1/Dockerfile.pre <<EOF
FROM stevedore
##############################################################################
# Enter custom Dockerfile commands here.
#RUN apt-get -qy install ...
#ADD http://shipyardassets.s3.amazonaws.com/requirements.txt /
#RUN pip install -r /requirements.txt
#EXPOSE 4000
#ENV HYPERLOOP_SPEED 850
##############################################################################
EOF
    cat >$1/Dockerfile.post <<EOF
RUN yum -y --exclude=upstart\* update
RUN yum -y install zsh vim git
RUN groupadd $USER
RUN useradd -m -g $USER -s $SHELL $USER
RUN echo "$USER ALL=(ALL) NOPASSWD: ALL" >/etc/sudoers.d/$USER
RUN chmod 0440 /etc/sudoers.d/$USER
RUN cp -a $(which sudo) $(which sudo).real
ADD sudo /sudo.tmp
RUN mv /sudo.tmp $(which sudo)
WORKDIR $HOME
ENV HOME $HOME
ENV STEVEDORE $1
USER $USER
ENTRYPOINT ["$SHELL", "-i", "-l"]
EOF
}

_stevedore_env_start () {
    # Note: don't check env validity, because before first start, environment
    # is not valid yet.
    $DOCKER run -h stevedore-$1 -d -t -i -v $CURRDIR:$HOME $1 > $1/cid
}

_stevedore_env_stop () {
    _stevedore_env_check $1
    $DOCKER kill $(cat $1/cid) >/dev/null
    $DOCKER wait $(cat $1/cid) >/dev/null
}

##############################################################################
# "Main"
##############################################################################

if [ "$1" ]
then
    CMD=$1
    shift
else
    CMD=help
fi

FUN=_stevedore_cmd_$CMD
type $FUN >/dev/null || {
    echo "Invalid command: $CMD."
    exit 1
}

$FUN "$@"
